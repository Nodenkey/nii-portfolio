{"version":3,"sources":["utils/colors.js","pages/home/home.style.js","utils/scroll-to-top.js","components/loader/loader.style.js","components/loader/loader.component.jsx","App.js","serviceWorker.js","index.js"],"names":["gold","subText","HomeWrapper","styled","div","Cursor","ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","LoaderWrapper","Vertical","Slide","Loader","leftBar","useRef","middleBar","rightBar","gsap","timeline","repeat","repeatDelay","to","scaleY","transformOrigin","duration","ease","opacity","rotateZ","marginLeft","y","ref","el","Home","lazy","Error","App","cursor","tl","scale","addEventListener","e","style","top","pageY","left","pageX","hover","document","querySelectorAll","classList","add","forEach","reverse","play","className","fallback","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qHAAA,oEAAO,IAAMA,EAAO,UACPC,EAAU,W,gjBCGhB,IAAMC,EAAcC,IAAOC,IAAV,KAEXC,EAASF,IAAOC,IAAV,IAKGJ,M,uLCRP,SAASM,IAAe,IAC3BC,EAAaC,cAAbD,SAMR,OAJAE,qBAAU,WACNC,OAAOC,SAAS,EAAG,KACpB,CAACJ,IAEG,K,4jBCNJ,IAAMK,EAAgBT,IAAOC,IAAV,KAQbS,EAAWV,IAAOC,IAAV,KASRU,EAAQX,YAAOU,EAAPV,CAAH,IAGEH,K,QCCLe,EArBA,WACX,IAAIC,EAAUC,iBAAO,MACjBC,EAAYD,iBAAO,MACnBE,EAAWF,iBAAO,MAStB,OARAR,qBAAU,WACNW,IAAKC,SAAS,CAACC,QAAU,EAAGC,YAAa,KAAKC,GAAGR,EAAS,CAACS,OAAS,EAAGC,gBAAkB,SAAUC,SAAW,GAC1GC,KAAO,aAAcC,QAAU,IAC9BL,GAAGN,EAAW,CAACO,OAAS,EAAGC,gBAAkB,MAAOC,SAAW,GAAIC,KAAO,aACvEE,SAAW,GAAIC,YAAc,GAAIC,EAAG,GAAIH,QAAU,IACrDL,GAAGL,EAAU,CAACM,OAAS,EAAGC,gBAAkB,SAAUC,SAAW,GAC9DC,KAAO,aAAcG,WAAa,GAAIF,QAAU,OAGxD,kBAACjB,EAAD,KACI,kBAACC,EAAD,CAAUoB,IAAK,SAAAC,GAAE,OAAIlB,EAAUkB,KAC/B,kBAACpB,EAAD,CAAOmB,IAAK,SAAAC,GAAE,OAAIhB,EAAYgB,KAC9B,kBAACrB,EAAD,CAAUoB,IAAK,SAAAC,GAAE,OAAIf,EAAWe,O,gBCZtCC,EAAOC,gBAAK,kBAAM,6DAClBC,EAAQD,gBAAK,kBAAM,sDA+CVE,MA7Cf,WACI,IAAIC,EAAStB,iBAAO,MA8BpB,OA3BAR,qBAAU,WACN,IAAM+B,EAAKpB,IAAKC,WAChBmB,EAAGhB,GAAGe,EAAQ,CAACE,MAAO,EAAGd,SAAU,KACnCjB,OAAOgC,iBAAiB,aAAa,SAACC,GACnB,OAAXJ,IACAA,EAAOK,MAAMC,IAAOF,EAAEG,MAAQ,GAAM,KACpCP,EAAOK,MAAMG,KAAQJ,EAAEK,MAAO,GAAO,SAG7CtC,OAAOgC,iBAAiB,aAAa,SAACC,GAClC,GAAe,OAAXJ,EAAiB,CACjB,IAAMU,EAAQC,SAASC,iBAAiB,UACxCZ,EAAOa,UAAUC,IAAI,kBACrBJ,EAAMK,SAAQ,SAACpB,GACXA,EAAGQ,iBAAiB,aAAa,WAC7BF,EAAGe,aAEPrB,EAAGQ,iBAAiB,YAAY,WAC5BF,EAAGgB,UAEPtB,EAAGQ,iBAAiB,SAAS,WACzBF,EAAGgB,oBAOnB,yBAAKC,UAAU,OACX,kBAAC,IAAD,CAAQxB,IAAK,SAAAC,GAAE,OAAIK,EAASL,KAC5B,kBAAC,WAAD,CAAUwB,SAAU,kBAAC,EAAD,OAChB,kBAACpD,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOqD,OAAK,EAACC,KAAK,IAAIC,UAAW1B,IACjC,kBAAC,IAAD,CAAO0B,UAAWxB,QCrClByB,QACW,cAA7BpD,OAAOqD,SAASC,UAEe,UAA7BtD,OAAOqD,SAASC,UAEhBtD,OAAOqD,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACD,kBAAC,gBAAD,KACI,kBAAC,EAAD,OAERjB,SAASkB,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2b101e4e.chunk.js","sourcesContent":["export const gold = '#D4AF37';\nexport const subText = '#cecece'","import styled from \"styled-components\";\nimport {gold} from \"../../utils/colors\";\n\n\nexport const HomeWrapper = styled.div`\n`;\nexport const Cursor = styled.div`\n  display: none;\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  border: 1px solid ${gold};\n  border-radius: 50%;\n  pointer-events: none;\n  transform: scale(3);\n  z-index: 9999999999999999999999999999;\n  @media only screen and (min-width: 1200px){\n  display: inline-block;\n  }\n`;","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return null;\n}","import styled from \"styled-components\";\nimport {gold} from \"../../utils/colors\";\n\n\nexport const LoaderWrapper = styled.div`\nheight: 100vh;\nwidth: 100vw;\nbackground-color: black;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n`;\nexport const Vertical = styled.div`\nheight: 150px;\nopacity: 0;\nwidth: 30px;\nborder-radius: 30%;\nbackground-color: rgba(212,175,55,0.63);\nmargin-right: 7px;\ntransform: scaleY(0);\n`;\nexport const Slide = styled(Vertical)`\nheight: 174px;\ntransform: scaleY(0);\nbackground-color: ${gold};\n`;","import React, {useEffect, useRef} from 'react';\nimport {LoaderWrapper, Slide, Vertical} from \"./loader.style\";\nimport {gsap} from \"gsap/all\";\n\nconst Loader = () => {\n    let leftBar = useRef(null);\n    let middleBar = useRef(null);\n    let rightBar = useRef(null);\n    useEffect(() => {\n        gsap.timeline({repeat : -1, repeatDelay: .4}).to(leftBar, {scaleY : 1, transformOrigin : 'bottom', duration : .4,\n            ease : 'power3.out', opacity : 1,})\n            .to(middleBar, {scaleY : 1, transformOrigin : 'top', duration : .4, ease : 'power3.out',\n                rotateZ : -25, marginLeft : -40, y: 10, opacity : 1})\n            .to(rightBar, {scaleY : 1, transformOrigin : 'bottom', duration : .4,\n                ease : 'power3.out', marginLeft : 35, opacity : 1,})\n    })\n    return (\n        <LoaderWrapper>\n            <Vertical ref={el => leftBar = el}/>\n            <Slide ref={el => middleBar = el}/>\n            <Vertical ref={el => rightBar = el}/>\n        </LoaderWrapper>\n    );\n};\n\nexport default Loader;\n","import React, {lazy, Suspense, useEffect, useRef} from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport './App.css';\nimport ScrollToTop from \"./utils/scroll-to-top\";\nimport Loader from \"./components/loader/loader.component\";\nimport {Cursor} from \"./pages/home/home.style\";\nimport gsap from \"gsap\";\n\nconst Home = lazy(() => import(\"./pages/home/home\"));\nconst Error = lazy(() => import(\"./components/error/error.component\"));\n\nfunction App() {\n    let cursor = useRef(null);\n\n\n    useEffect(() => {\n        const tl = gsap.timeline();\n        tl.to(cursor, {scale: 1, duration: .3});\n        window.addEventListener('mousemove', (e) => {\n            if (cursor !== null){\n                cursor.style.top = (e.pageY - 10) + 'px';\n                cursor.style.left = (e.pageX -10 ) + 'px';\n            }\n        });\n        window.addEventListener('mousemove', (e) => {\n            if (cursor !== null) {\n                const hover = document.querySelectorAll('.hover');\n                cursor.classList.add('reverse-cursor');\n                hover.forEach((el) => {\n                    el.addEventListener('mouseover', () => {\n                        tl.reverse()\n                    })\n                    el.addEventListener('mouseout', () => {\n                        tl.play();\n                    })\n                    el.addEventListener('click', () => {\n                        tl.play();\n                    })\n                })\n            }\n        })\n    })\n    return (\n        <div className=\"App\">\n            <Cursor ref={el => cursor = el}/>\n            <Suspense fallback={<Loader/>}>\n                <ScrollToTop/>\n                <Switch>\n                    <Route exact path='/' component={Home}/>\n                    <Route component={Error}/>\n                </Switch>\n            </Suspense>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}